import {
  BaseSignal,
  EventType,
  HTTPMethod,
  LocalDataAction,
  NetworkAction,
  SignalType,
} from '../shared/shared-types';

export type Signal =
  | InteractionSignal
  | NavigationSignal
  | NetworkSignal
  | LocalDataSignal
  | InstrumentationSignal
  | UserDefinedSignal;

export interface RawSignal<T extends SignalType, Data> extends BaseSignal {
  type: T;
  data: Data;
  index: number;
}

//=======================Interaction===================================//
interface InteractionData {
  eventType: string;
  target: {
    component: string;
    title: string;
    data: any;
  };
}

type InteractionSignal = RawSignal<'interaction', InteractionData>;

//=======================Navigation=================================//
interface NavigationData {
  previousScreen: String;
  currentScreen: string;
}

type NavigationSignal = RawSignal<'navigation', NavigationData>;

//=======================Network===================================//
interface NetworkData {
  action: NetworkAction;
  url: string;
  body: any;
  contentType: string;
  method: HTTPMethod;
  status: number;
  ok: boolean;
  requestId: string;
}

type NetworkSignal = RawSignal<'network', NetworkData>;

//=======================UserDefined================================//
type UserDefinedSignal = RawSignal<'userDefined', any>;

//=======================Instrumentation============================//
interface InstrumentationData {
  type: EventType;
  rawEvent: any;
}

type InstrumentationSignal = RawSignal<'instrumentation', InstrumentationData>;

//=======================LocalData=================================//
interface LocalData {
  action: LocalDataAction;
  identifier: string;
  data: string;
}

type LocalDataSignal = RawSignal<'localData', LocalData>;

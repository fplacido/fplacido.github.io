export type ID = string | null | undefined;
export interface BaseSignal {
    type: string;
    anonymousId: ID;
    timestamp: string;
    index: any;
    data: any;
    context: Context;
}
export type SignalOfType<AllSignals extends BaseSignal, SignalType extends AllSignals['type']> = AllSignals & {
    type: SignalType;
};
export interface SegmentEvent {
    /**
     * @example 'track' | 'page' | 'screen' | 'identify' | 'group' | 'alias'
     */
    type: string;
    [key: string]: unknown;
}
export interface AppContext {
    name: string;
    version: string;
    build: string;
    namespace: string;
}
export interface LibraryContext {
    name: string;
    version: string;
}
export interface Context {
    /**
     * Information about the app that generated the signal.
     * This only exists in the mobile runtime.
     */
    app?: AppContext;
    library: LibraryContext;
    signalsRuntime: string;
}
export type SignalType = 'interaction' | 'navigation' | 'network' | 'localData' | 'instrumentation' | 'userDefined';
export type EventType = 'track' | 'page' | 'screen' | 'identify' | 'group' | 'alias';
export type NetworkAction = 'request' | 'response';
export type LocalDataAction = 'created' | 'read' | 'updated' | 'deleted' | 'undefined';
export type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS';
//# sourceMappingURL=shared-types.d.ts.map
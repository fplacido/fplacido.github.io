import { logger } from "../../../lib/logger";
import { SignalEventProcessor } from "../../processor/processor";
import { GlobalScopeSandbox, IframeSandboxSettings, NoopSandbox, WorkerSandbox, normalizeEdgeFunctionURL, } from "../../processor/sandbox";
export class SignalsEventProcessorSubscriber {
    load(ctx) {
        this.buffer = ctx.buffer;
        const sandboxSettings = ctx.unstableGlobalSettings.sandbox;
        const normalizedEdgeFunctionURL = normalizeEdgeFunctionURL(sandboxSettings.functionHost, sandboxSettings.edgeFnDownloadURL);
        let sandbox;
        if (!normalizedEdgeFunctionURL) {
            console.warn(`No processSignal function found. Have you written a processSignal function on app.segment.com?`);
            logger.debug("Initializing sandbox: noop");
            sandbox = new NoopSandbox();
        }
        else if (sandboxSettings.sandboxStrategy === "iframe" ||
            sandboxSettings.processSignal) {
            logger.debug("Initializing sandbox: iframe");
            sandbox = new WorkerSandbox(new IframeSandboxSettings({
                processSignal: sandboxSettings.processSignal,
                edgeFnDownloadURL: normalizedEdgeFunctionURL,
            }));
        }
        else {
            logger.debug("Initializing sandbox: global scope");
            sandbox = new GlobalScopeSandbox({
                edgeFnDownloadURL: normalizedEdgeFunctionURL,
            });
        }
        this.processor = new SignalEventProcessor(ctx.analyticsInstance, sandbox);
    }
    async process(signal) {
        return this.processor.process(signal, await this.buffer.getAll());
    }
}
//# sourceMappingURL=index.js.map
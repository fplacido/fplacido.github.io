import { URLChangeObservable } from "../../../lib/detect-url-change";
import { createNavigationSignal } from "../../../types/factories";
function getChangedProperties(url1, url2) {
    const changed = [];
    const propertiesToCompare = ["pathname", "search", "hash"];
    for (const property of propertiesToCompare) {
        if (url1[property] !== url2[property]) {
            if (property === "pathname") {
                changed.push("path");
            }
            else {
                changed.push(property);
            }
        }
    }
    return changed;
}
export class OnNavigationEventGenerator {
    constructor() {
        this.id = "navigation";
        this.urlChange = new URLChangeObservable();
    }
    register(emitter) {
        emitter.emit(createNavigationSignal({
            ...this.createCommonFields(),
        }));
        // emit a navigation signal whenever the URL has changed
        this.urlChange.subscribe(({ previous, current }) => emitter.emit(createNavigationSignal({
            previousUrl: previous.href,
            changedProperties: getChangedProperties(current, previous),
            ...this.createCommonFields(),
        })));
        return () => {
            this.urlChange.unsubscribe();
        };
    }
    createCommonFields() {
        return {
            // these fields are named after those from the page call, rather than a DOM api.
            currentUrl: location.href,
            path: location.pathname,
            hash: location.hash,
            search: location.search,
            title: document.title,
        };
    }
}
//# sourceMappingURL=navigation-gen.js.map
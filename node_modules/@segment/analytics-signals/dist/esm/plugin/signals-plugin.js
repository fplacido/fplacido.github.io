import { Signals } from "../core/signals";
import { version } from "../generated/version";
import { assertBrowserEnv } from "../lib/assert-browser-env";
import { logger } from "../lib/logger";
import { createUserDefinedSignal } from "../types/factories";
export class SignalsPlugin {
    constructor(settings = {}) {
        this.type = "utility";
        this.name = "SignalsPlugin";
        this.version = version;
        assertBrowserEnv();
        // assign to window.SegmentSignalsPlugin for debugging purposes (e.g window.SegmentSignalsPlugin.debug())
        Object.assign(window, { SegmentSignalsPlugin: this });
        this.signals = new Signals({
            ...settings,
            processSignal: typeof settings.processSignal === "function"
                ? settings.processSignal.toString()
                : settings.processSignal,
        });
        logger.debug(`SignalsPlugin v${version} initializing`, {
            settings,
        });
    }
    isLoaded() {
        return true;
    }
    async load(_ctx, analytics) {
        try {
            await this.signals.start(analytics);
            logger.debug("SignalsPlugin loaded");
        }
        catch (err) {
            console.error(err);
        }
    }
    stop() {
        return this.signals.stop();
    }
    onSignal(cb) {
        this.signals.signalEmitter.subscribe(cb);
        return this;
    }
    addSignal(data) {
        this.signals.signalEmitter.emit(createUserDefinedSignal(data));
        return this;
    }
    /**
     * Enable redaction and disable ingestion of signals. Also, logs signals to the console.
     */
    debug(...args) {
        this.signals.debug(...args);
        return this;
    }
}
//# sourceMappingURL=signals-plugin.js.map
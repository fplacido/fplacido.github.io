import { Signal } from "@segment/analytics-signals-runtime";
import { AnalyticsMethodCalls, MethodName } from "./sandbox-analytics-runtime";
export type { AnalyticsMethodCalls, MethodName };
interface CodeSandbox {
    run: (fn: string, scope: Record<string, any>) => Promise<any>;
    destroy: () => Promise<void>;
}
export declare const normalizeEdgeFunctionURL: (functionHost: string | undefined, edgeFnDownloadURL: string | undefined) => string | undefined;
export type SandboxSettingsConfig = {
    functionHost: string | undefined;
    processSignal: string | undefined;
    edgeFnDownloadURL: string | undefined;
    edgeFnFetchClient?: typeof fetch;
    sandboxStrategy: "iframe" | "global";
};
export type IframeSandboxSettingsConfig = Pick<SandboxSettingsConfig, "processSignal" | "edgeFnFetchClient" | "edgeFnDownloadURL">;
export declare class IframeSandboxSettings {
    /**
     * Should look like:
     * ```js
     * function processSignal(signal) {
     * ...
     * }
     * ```
     */
    processSignal: Promise<string>;
    constructor(settings: IframeSandboxSettingsConfig);
}
export interface SignalSandbox {
    execute(signal: Signal, signals: Signal[]): Promise<AnalyticsMethodCalls | undefined>;
    destroy(): void | Promise<void>;
}
export declare class WorkerSandbox implements SignalSandbox {
    settings: IframeSandboxSettings;
    jsSandbox: CodeSandbox;
    constructor(settings: IframeSandboxSettings);
    execute(signal: Signal, signals: Signal[]): Promise<AnalyticsMethodCalls>;
    destroy(): void;
}
/**
 * Sandbox that avoids CSP errors, but evaluates everything globally
 */
interface GlobalScopeSandboxSettings {
    edgeFnDownloadURL: string;
}
export declare class GlobalScopeSandbox implements SignalSandbox {
    htmlScriptLoaded: Promise<HTMLScriptElement>;
    constructor(settings: GlobalScopeSandboxSettings);
    execute(signal: Signal, signals: Signal[]): Promise<AnalyticsMethodCalls | undefined>;
    destroy(): void;
}
export declare class NoopSandbox implements SignalSandbox {
    execute(_signal: Signal, _signals: Signal[]): Promise<undefined>;
    destroy(): void;
}
//# sourceMappingURL=sandbox.d.ts.map
import { AliasArgs, GroupArgs, IdentifyArgs, PageArgs, ScreenArgs, TrackArgs } from "@segment/signals-types";
import { AnalyticsRuntimePublicApi } from "../../types";
export type MethodName = "page" | "identify" | "track" | "alias" | "screen" | "group";
/**
 * Buffer of any analytics calls made during the processing of a signal
 */
export type AnalyticsMethodCalls = Record<MethodName, any[]> & {
    reset: unknown[];
};
/**
 * Proxy around the analytics client
 */
export declare class AnalyticsRuntime implements AnalyticsRuntimePublicApi {
    private calls;
    getCalls(): AnalyticsMethodCalls;
    /**
     * Stamp the context with the event origin to prevent infinite signal-event loops.
     */
    private createOptions;
    track: (...args: TrackArgs) => void;
    identify: (...args: IdentifyArgs) => void;
    alias: (...args: AliasArgs) => void;
    group: (...args: GroupArgs) => void;
    page: (...args: PageArgs) => void;
    screen: (...args: ScreenArgs) => void;
    reset: () => void;
}
//# sourceMappingURL=sandbox-analytics-runtime.d.ts.map